import datetime
import unittest
from typing import Dict, List, Optional
from abc import ABC, abstractmethod
import logging
import tkinter as tk
import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QListWidget, QPushButton, QVBoxLayout, QWidget, QLineEdit, QLabel, QInputDialog
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    filename='task_tracker.log'
)

class BaseTaskException(Exception):
    def __init__(self, message, context=None):
        super().__init__(message)
        self.message = message
        self.context = context or {}
        self.log()

    def log(self):
        error_details = f"–û—à–∏–±–∫–∞: {self.message}"
        if self.context:
            error_details += f" | –ö–æ–Ω—Ç–µ–∫—Å—Ç: {self.context}"
        logging.error(error_details)

class CustomError(BaseTaskException):
    pass

class SpecificError(CustomError):
    def __init__(self, message, context=None):
        super().__init__(message, context)
        print(f"‚ö†Ô∏è –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {message}")

class TaskBase(ABC):
    @abstractmethod
    def display(self) -> str:
        pass

    @abstractmethod
    def is_overdue(self) -> bool:
        pass

    @abstractmethod
    def process(self):
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        pass

    @abstractmethod
    def report(self):
        """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        pass

# –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∫–ª–∞—Å—Å—ã
class RegularTask(TaskBase):
    def __init__(self, task_id, title, description, priority, due_date):
        self.id = task_id
        self.title = title
        self.description = description
        self.priority = priority
        self.completed = False
        self.due_date = due_date

    def is_overdue(self) -> bool:
        return datetime.datetime.now() > self.due_date

    def display(self) -> str:
        status = "‚úÖ" if self.completed else "‚ùå"
        return f"[{status}] {self.title} (ID: {self.id}) | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {self.priority}"

    def process(self):
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π –∑–∞–¥–∞—á–∏: {self.title}")
    
    def report(self):
        return f"–ó–∞–¥–∞—á–∞ '{self.title}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

class RecurringTask(TaskBase):
    def __init__(self, task_id, title, description, priority, due_date, frequency):
        super().__init__()
        self.id = task_id
        self.title = title
        self.description = description
        self.priority = priority
        self.completed = False
        self.due_date = due_date
        self.frequency = frequency  # 'daily', 'weekly'

    def is_overdue(self) -> bool:
        return datetime.datetime.now() > self.due_date

    def display(self) -> str:
        return f"[üîÑ] {self.title} (ID: {self.id}) | –ß–∞—Å—Ç–æ—Ç–∞: {self.frequency}"

    def process(self):
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏: {self.title} (–ß–∞—Å—Ç–æ—Ç–∞: {self.frequency})")
    
    def report(self):
        return f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ '{self.title}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"

# –õ—è–º–±–¥–∞-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
def filter_tasks(tasks, criteria):
    return list(filter(criteria, tasks))

def sort_tasks(tasks, key=lambda x: x.due_date):
    return sorted(tasks, key=key)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class BaseUser:
    def __init__(self, username: str):
        self._username = username

    def get_username(self):
        return self._username

# –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(BaseUser):
    def __init__(self, username: str, password: str):
        super().__init__(username)
        self._password = password
        self.tasks: List[TaskBase] = []  # –¢–µ–ø–µ—Ä—å –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    def add_task(self, task: TaskBase):
        self.tasks.append(task)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task.title} –¥–ª—è {self._username}")

    def archive_completed(self):
        self.tasks = [t for t in self.tasks if not t.completed]
        logging.info(f"–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è {self._username}")

class Authenticator:
    def __init__(self):
        self.users: Dict[str, User] = {}

    def register(self, username, password):
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {username}")
        if not username:
            raise SpecificError("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", {"action": "register"})
        if username in self.users:
            raise CustomError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", {"action": "register"})
        self.users[username] = User(username, password)
        logging.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {username}")

    def login(self, username, password):
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ {username}")
        user = self.users.get(username)
        if user and user._password == password:
            logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ {username}")
            return user
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {username}")
            return None

class TaskManager:
    def __init__(self, user: User):
        self.user = user

    def add_task(self, task_type, title, description, priority, due_date_str, **kwargs):
        due_date = datetime.datetime.strptime(due_date_str, "%Y-%m-%d %H:%M")
        task_id = len(self.user.tasks) + 1
        if task_type == "regular":
            task = RegularTask(task_id, title, description, priority, due_date)
        elif task_type == "recurring":
            frequency = kwargs.get("frequency", "weekly")
            task = RecurringTask(task_id, title, description, priority, due_date, frequency)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏")
        self.user.add_task(task)
        return task

    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—è–º–±–¥ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    def get_overdue_tasks(self):
        return filter_tasks(self.user.tasks, lambda x: x.is_overdue())

    def sort_by_priority(self):
        return sort_tasks(self.user.tasks, lambda x: ["low", "medium", "high"].index(x.priority))

class TaskApp(QMainWindow):
    def __init__(self, user):
        super().__init__()
        self.user = user
        self.task_manager = TaskManager(user)

        self.setWindowTitle("Task Tracker")
        self.setGeometry(100, 100, 400, 300)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout()

        self.task_list = QListWidget()
        layout.addWidget(self.task_list)

        self.title_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        layout.addWidget(self.title_label)
        self.title_input = QLineEdit()
        layout.addWidget(self.title_input)

        self.add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.add_button.clicked.connect(self.add_task)
        layout.addWidget(self.add_button)

        central_widget.setLayout(layout)

    def add_task(self):
        title = self.title_input.text().strip()
        if not title:
            title, ok = QInputDialog.getText(self, "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            if not (ok and title.strip()):
                return
        task = self.task_manager.add_task("regular", title, "", "medium", "2025-04-22 12:00")
        self.task_list.addItem(str(task))
        self.title_input.clear()

    def run(self):
        self.show()

if __name__ == "__main__":
    app = QApplication(sys.argv)

    auth = Authenticator()
    auth.register("test_user", "password123")
    user = auth.login("test_user", "password123")

    task_app = TaskApp(user)
    task_app.run()

    sys.exit(app.exec())